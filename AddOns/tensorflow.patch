diff --git a/ATOOLS/Math/Random.C b/ATOOLS/Math/Random.C
index 8a58f7c92..9ef468ec3 100644
--- a/ATOOLS/Math/Random.C
+++ b/ATOOLS/Math/Random.C
@@ -380,9 +380,9 @@ size_t ATOOLS::Random::ReadInStatus4(std::istream &is,const size_t &idx)
 void ATOOLS::Random::SaveStatus4() { *p_ran4[1]=*p_ran4[0]; }
 void ATOOLS::Random::RestoreStatus4() { *p_ran4[0]=*p_ran4[1]; }
 
-double ATOOLS::Random::Get()   
+double ATOOLS::Random::Get(int mode)   
 {
-  if (p_external) return p_external->Get();
+  if (p_external && not mode) return p_external->Get();
   // Sherpa internal
   double rng(0.);
   ++m_nsinceinit;
diff --git a/ATOOLS/Math/Random.H b/ATOOLS/Math/Random.H
index 9a5a15e37..be209b525 100644
--- a/ATOOLS/Math/Random.H
+++ b/ATOOLS/Math/Random.H
@@ -84,7 +84,7 @@ namespace ATOOLS {
     inline void SetSeedStorageIncrement(size_t inc) { m_increment=inc; }
 
     // return uniformly distributed random number in [0,1] using active Generator
-    double Get();   
+    double Get(int mode = 0);   
     ptrdiff_t operator() (ptrdiff_t max);
     // produce two Gaussian distributed random number using active Generator
     void   Gaussian(double &,double &);
diff --git a/ATOOLS/Org/Exception_Handler.C b/ATOOLS/Org/Exception_Handler.C
index 370d65a65..8feb73887 100644
--- a/ATOOLS/Org/Exception_Handler.C
+++ b/ATOOLS/Org/Exception_Handler.C
@@ -40,7 +40,7 @@ Exception_Handler::Exception_Handler():
   std::set_terminate(ATOOLS::Terminate);
   std::set_unexpected(ATOOLS::Terminate);
   signal(SIGSEGV,ATOOLS::SignalHandler);
-  signal(SIGINT,ATOOLS::SignalHandler);
+//  signal(SIGINT,ATOOLS::SignalHandler);
   signal(SIGPIPE,ATOOLS::SignalHandler);
   signal(SIGBUS,ATOOLS::SignalHandler);
   signal(SIGFPE,ATOOLS::SignalHandler);
diff --git a/AddOns/Makefile.am b/AddOns/Makefile.am
index 0ddf023ae..a7411e86a 100644
--- a/AddOns/Makefile.am
+++ b/AddOns/Makefile.am
@@ -13,7 +13,8 @@ SUBDIRS       =	\
 		Delphes \
 		Rivet \
 		HepMC \
-		Root
+		Root \
+		Tensorflow
 
 nobase_dist_pkgdata_DATA = \
 			HEPEVT/HEPEVT_Interface.C \
diff --git a/AddOns/Python/MEProcess.C b/AddOns/Python/MEProcess.C
index 4761a9a8d..a39811dad 100644
--- a/AddOns/Python/MEProcess.C
+++ b/AddOns/Python/MEProcess.C
@@ -334,9 +334,12 @@ ATOOLS::Vec4D_Vector MEProcess::TestPoint(const double& E){
 
 double MEProcess::MatrixElement()
 {
-  if(p_colint!=NULL) p_colint->SetWOn(false);
-  double res(p_proc->Differential(*p_amp,1|4));
-  if(p_colint!=NULL) p_colint->SetWOn(true);
+//  if(p_colint!=NULL) p_colint->SetWOn(false);
+  for(int i = 0; i < p_amp->Legs().size(); ++i) {
+    p_amp->Leg(i)->SetCol(ATOOLS::ColorID(0,0));
+  }
+  double res(p_proc->Differential(*p_amp,1|4|128));
+//  if(p_colint!=NULL) p_colint->SetWOn(true);
   // if(res!=0.0){
   //   PRINT_VAR(*p_amp);
   //   PRINT_VAR(res);
@@ -345,8 +348,34 @@ double MEProcess::MatrixElement()
   return res;
 }
 
+std::vector<double> MEProcess::MatrixElementVec(int nParts, int nEvents, int index, double* arr) {
+//    ATOOLS::msg -> SetLevel(15);
+    std::vector<double> result(nEvents);
+    for(int i = 0; i < nEvents; ++i) {
+        for(int j = 0; j < nParts; ++j) {
+            int n = j*nEvents*4+4*i;
+            SetMomentum(j,arr[n],arr[n+1],arr[n+2],arr[n+3]);
+        }
+        result[i] = MatrixElement();
+    }
+
+    return result;
+}
+
+void MEProcess::MatrixElementVec2(int nEvents, int nParts, int index, double* arr, double* out, int length) {
+    out = new double[length];
+    for(int i = 0; i < nEvents; ++i) {
+        for(int j = 0; j < nParts; ++j) {
+            int n = j*nEvents*4+4*i;
+            SetMomentum(j,arr[n],arr[n+1],arr[n+2],arr[n+3]);
+        }
+        out[i] = MatrixElement();
+    }
+}
+
 double MEProcess::CSMatrixElement()
 {
+//    ATOOLS::msg -> SetLevel(15);
   if (p_colint==NULL) return MatrixElement();
   GenerateColorPoint();
   double r_csme(0.);
@@ -375,7 +404,35 @@ double MEProcess::CSMatrixElement()
   }
   return r_csme;
 }
+  
+std::vector<double> MEProcess::CSMatrixElementVec(int nParts, int nEvents, int index, double* arr) {
+//    ATOOLS::msg -> SetLevel(15);
+    std::cout << nParts << " " << nEvents << " " << index << std::endl;
+    std::vector<double> result(nEvents);
+    for(int i = 0; i < nEvents; ++i) {
+        for(int j = 0; j < nParts; ++j) {
+            int n = j*nEvents*4+4*i;
+            SetMomentum(j,arr[n],arr[n+1],arr[n+2],arr[n+3]);
+        }
+        result[i] = CSMatrixElement();
+        std::cout << result[i] << std::endl;
+    }
+
+    return result;
+}
 
+void MEProcess::CSMatrixElementVec2(int nEvents, int nParts, int index, double* arr, double* out, int length) {
+//    ATOOLS::msg -> SetLevel(15);
+    out = new double[length];
+    for(int i = 0; i < nEvents; ++i) {
+        for(int j = 0; j < nParts; ++j) {
+            int n = j*nEvents*4+4*i;
+            SetMomentum(j,arr[n],arr[n+1],arr[n+2],arr[n+3]);
+        }
+        out[i] = CSMatrixElement();
+    }
+}
+  
 double MEProcess::GetFlux()
 {
   ATOOLS::Vec4D p0(-p_amp->Leg(0)->Mom());
diff --git a/AddOns/Python/MEProcess.H b/AddOns/Python/MEProcess.H
index 64dcfe97c..c16f50e81 100644
--- a/AddOns/Python/MEProcess.H
+++ b/AddOns/Python/MEProcess.H
@@ -73,7 +73,11 @@ public:
 
   ATOOLS::Vec4D_Vector TestPoint(const double& sqrts);
   double MatrixElement();
+  std::vector<double> MatrixElementVec(int nEvents, int nParts, int index, double* arr);
+  void MatrixElementVec2(int nEvents, int nParts, int index, double* arr, double* out, int length);
   double CSMatrixElement();
+  std::vector<double> CSMatrixElementVec(int nEvents, int nParts, int index, double* arr);
+  void CSMatrixElementVec2(int nEvents, int nParts, int index, double* arr, double* out, int length);
 
   double GetFlux();
   std::string GeneratorName();
diff --git a/AddOns/Python/MEProcess.i b/AddOns/Python/MEProcess.i
index 04037390a..9846d422a 100644
--- a/AddOns/Python/MEProcess.i
+++ b/AddOns/Python/MEProcess.i
@@ -6,6 +6,8 @@
 #include "AddOns/Python/MEProcess.H"
 %}
 
+%include "std_vector.i"
+
 %catches (ATOOLS::Exception) MEProcess::Initialize();
 
 namespace SHERPA{
@@ -19,6 +21,17 @@ namespace PHASIC{
   class Process_Base;
 }
 
+%template(vectord) std::vector<double>;
+
+%include "numpy.i"
+
+%init %{
+import_array();
+%}
+
+%apply (int DIM1, int DIM2, int DIM3, double* IN_ARRAY3) {(int nEvents, int nParts, int index, double* arr)};
+%apply (double* ARGOUT_ARRAY1, int DIM1) {(double* out, int length)};
+
 class MEProcess{
 
 public:
@@ -37,7 +50,11 @@ public:
 
   ATOOLS::Vec4D_Vector TestPoint(const double& sqrts);
   double MatrixElement();
+  std::vector<double> MatrixElementVec(int nEvents, int nParts, int index, double* arr);
+  void MatrixElementVec2(int nEvents, int nParts, int index, double* arr, double* out, int length);
   double CSMatrixElement();
+  std::vector<double> CSMatrixElementVec(int nEvents, int nParts, int index, double* arr);
+  void CSMatrixElementVec2(int nEvents, int nParts, int index, double* arr, double* out, int length);
   double MEProcess::GetFlux();
   inline ATOOLS::Cluster_Amplitude* GetAmp()
   {return m_amp;}
diff --git a/AddOns/Python/Makefile.am b/AddOns/Python/Makefile.am
index f99e87b93..0e0c4b6cd 100644
--- a/AddOns/Python/Makefile.am
+++ b/AddOns/Python/Makefile.am
@@ -17,8 +17,8 @@ Sherpa_wrap.cxx: $(noinst_HEADERS)
 python_LTLIBRARIES = _Sherpa.la
 
 nodist__Sherpa_la_SOURCES = Sherpa_wrap.cxx
-_Sherpa_la_CPPFLAGS= @PYTHON_CPPFLAGS@
-_Sherpa_la_LDFLAGS = -module
+_Sherpa_la_CPPFLAGS= @PYTHON_CPPFLAGS@ -O3 ${TF_CFLAGS}
+_Sherpa_la_LDFLAGS = -module -shared -flat_namespace -undefined suppress ${TF_LFLAGS}
 _Sherpa_la_LIBADD  = -L@SHERPABUILDDIR@/Main -lSherpaMain -lMEProcess\
 		$(HZTOOLLIBS) $(PGSLIBS) @ATOOLSLIBS@
 
diff --git a/AddOns/Python/Sherpa.i b/AddOns/Python/Sherpa.i
index 2009ceb8e..b9eef282a 100644
--- a/AddOns/Python/Sherpa.i
+++ b/AddOns/Python/Sherpa.i
@@ -1,4 +1,11 @@
 %module Sherpa
+
+%{
+#define SWIG_FILE_WITH_INIT
+#include <SHERPA/Main/Sherpa.H>
+#include "ATOOLS/Math/Random.H"
+  %}
+
 %include "Exception.i"
 %include "Flavour.i"
 %include "Vec4.i"
@@ -8,11 +15,6 @@
 %include "MEProcess.i"
 %include "Random.i"
 
-%{
-#include <SHERPA/Main/Sherpa.H>
-#include "ATOOLS/Math/Random.H"
-  %}
-
 %catches (ATOOLS::Exception) SHERPA::Sherpa::InitializeTheRun(int, char**);
 
 // A typemap is required in order to be able to pass
diff --git a/COMIX/Phasespace/PS_Channel.C b/COMIX/Phasespace/PS_Channel.C
index 5673f91ab..bbbf5b812 100644
--- a/COMIX/Phasespace/PS_Channel.C
+++ b/COMIX/Phasespace/PS_Channel.C
@@ -575,6 +575,7 @@ bool PS_Channel::GenerateChannel
   for (size_t i(0);i<psum.size();++i)
     if (psum[i]>=rans[m_nr+v.size()]*sum) {
       vtx=vtcs[i];
+      rpa -> gen.SetVariable("channel_"+ToString(cur->Id().size()), ToString(i));
       break;
     }
   if (vtx==NULL) {
diff --git a/CSSHOWER++/Showers/Shower.C b/CSSHOWER++/Showers/Shower.C
index 71a1d454e..881c00ca1 100644
--- a/CSSHOWER++/Showers/Shower.C
+++ b/CSSHOWER++/Showers/Shower.C
@@ -466,9 +466,9 @@ bool Shower::EvolveSinglet(Singlet * act,const size_t &maxem,size_t &nem)
     ResetScales(p_actual->KtNext());
     return true;
   }
-  if (p_actual->GetSplit() &&
-      (p_actual->GetSplit()->Stat()&4) &&
-      !(p_actual->GetSplit()->Stat()&2)) {
+  if (p_actual->GetSplit() ){// &&
+//      (p_actual->GetSplit()->Stat()&4) &&
+//      !(p_actual->GetSplit()->Stat()&2)) {
     msg_Debugging()<<"Skip EW clustering\n";
     return true;
   }
diff --git a/PHASIC++/Enhance/Makefile.am b/PHASIC++/Enhance/Makefile.am
index e1ab72a37..7690e98ab 100644
--- a/PHASIC++/Enhance/Makefile.am
+++ b/PHASIC++/Enhance/Makefile.am
@@ -8,7 +8,8 @@ libPhasicEnhance_la_SOURCES   =	\
 				Git_Info.C \
 				Enhance_Observable_Base.C \
 				Variable_Enhance_Observable.C \
-				Fastjet_Enhance_Observable.C
+				Fastjet_Enhance_Observable.C \
+				Josh_Enhance_Observable.C
 
 localinc_HEADERS      =	\
 			Enhance_Observable_Base.H
diff --git a/PHASIC++/Main/Color_Integrator.C b/PHASIC++/Main/Color_Integrator.C
index 3a52e37c2..32c6fd4a5 100644
--- a/PHASIC++/Main/Color_Integrator.C
+++ b/PHASIC++/Main/Color_Integrator.C
@@ -106,7 +106,7 @@ bool Color_Integrator::ConstructRepresentations
 
 size_t Color_Integrator::GenerateIndex()
 {
-  double rn(3.0*ran->Get());
+  double rn(3.0*ran->Get(1));
   for (double disc(1.0);disc<=3.0;++disc)
     if (disc>=rn) return (size_t)disc;
   return std::string::npos;
@@ -124,7 +124,7 @@ bool Color_Integrator::GenerateColours()
   size_t nr(0), ng(0), nb(0);
   for (size_t i(0);i<iids.size();++i) {
     // select partner
-    size_t j(Min(jids.size()-1,(size_t)(ran->Get()*jids.size())));
+    size_t j(Min(jids.size()-1,(size_t)(ran->Get(1)*jids.size())));
     // set colours
     size_t idx(GenerateIndex());
     m_ids[iids[i]]->SetI(idx);
@@ -594,7 +594,7 @@ bool Color_Integrator::LookUp()
     m_over-=1.0;
     return true;
   }
-  double rn(ran->Get());
+  double rn(ran->Get(1));
   if (rn>=m_over) {
     m_orders.clear();
     m_weights.clear();
@@ -621,7 +621,7 @@ int Color_Integrator::Generate()
       weight+=m_alpha[type];
     }
   }
-  double rn(ran->Get());
+  double rn(ran->Get(1));
   double cmax(m_alphamode>1?m_max:m_mean/m_weight*m_cmax);
   m_over=Max(0.0,weight/cmax-1.0);
   msg_Debugging()<<METHOD<<"(): amode = "<<m_alphamode<<", rn = "
diff --git a/PHASIC++/Scales/Makefile.am b/PHASIC++/Scales/Makefile.am
index 0d6054b9d..d42ddd981 100644
--- a/PHASIC++/Scales/Makefile.am
+++ b/PHASIC++/Scales/Makefile.am
@@ -25,6 +25,7 @@ libPhasicScales_la_SOURCES    =	\
 				HTPrime_Core_Scale.C \
 				METS_Scale_Setter.C \
 				Variable_KFactor_Setter.C \
+				Fastjet_KFactor_Setter.C \
 				No_KFactor_Setter.C
 
 localinc_HEADERS      =	\
diff --git a/PHASIC++/Scales/Variable_KFactor_Setter.C b/PHASIC++/Scales/Variable_KFactor_Setter.C
index 8f433ee7c..f1d58a783 100644
--- a/PHASIC++/Scales/Variable_KFactor_Setter.C
+++ b/PHASIC++/Scales/Variable_KFactor_Setter.C
@@ -8,6 +8,10 @@
 #include "MODEL/Main/Running_AlphaS.H"
 #include "MODEL/Main/Running_AlphaQED.H"
 #include "ATOOLS/Org/Run_Parameter.H"
+#include "ATOOLS/Phys/Fastjet_Helpers.H"
+#include "fastjet/PseudoJet.hh"
+#include "fastjet/ClusterSequence.hh"
+#include "fastjet/SISConePlugin.hh"
 
 namespace PHASIC {
 
diff --git a/SHERPA/Initialization/Initialization_Handler.C b/SHERPA/Initialization/Initialization_Handler.C
index 9ffded6b6..69670bba3 100644
--- a/SHERPA/Initialization/Initialization_Handler.C
+++ b/SHERPA/Initialization/Initialization_Handler.C
@@ -599,8 +599,8 @@ bool Initialization_Handler::InitializeThePDFs()
 #endif
     }
     void *init(s_loader->GetLibraryFunction(*pdflib,"InitPDFLib"));
-    if (init==NULL) THROW(fatal_error,"Cannot load PDF library "+*pdflib);
-    ((PDF_Init_Function)init)();
+    //if (init==NULL) THROW(fatal_error,"Cannot load PDF library "+*pdflib);
+    if(init!=NULL) ((PDF_Init_Function)init)();
   }
 
   // PDF set listing output
diff --git a/SHERPA/PerturbativePhysics/Matrix_Element_Handler.C b/SHERPA/PerturbativePhysics/Matrix_Element_Handler.C
index 8eeac7585..075b14235 100644
--- a/SHERPA/PerturbativePhysics/Matrix_Element_Handler.C
+++ b/SHERPA/PerturbativePhysics/Matrix_Element_Handler.C
@@ -135,6 +135,7 @@ void Matrix_Element_Handler::InitNLOMC()
 bool Matrix_Element_Handler::CalculateTotalXSecs() 
 {
   int storeresults = Data_Reader(" ",";","!","=").GetValue("GENERATE_RESULT_DIRECTORY", 1);
+  if (storeresults<0) return true;
   if (storeresults) {
     My_In_File::OpenDB(m_respath+"/");
     My_In_File::ExecDB(m_respath+"/","PRAGMA cache_size = 100000");
diff --git a/configure.ac b/configure.ac
index 0533cf70c..bcd25ea14 100644
--- a/configure.ac
+++ b/configure.ac
@@ -244,6 +244,7 @@ AC_OUTPUT(ATOOLS/Math/Makefile \
 	  AddOns/Rivet/Makefile \
 	  AddOns/HepMC/Makefile \
 	  AddOns/Root/Makefile \
+	  AddOns/Tensorflow/Makefile \
 	  AddOns/Makefile \
 	  Makefile )
 
diff --git a/m4/acinclude.m4 b/m4/acinclude.m4
index 92c9b598e..1e6ef6bad 100644
--- a/m4/acinclude.m4
+++ b/m4/acinclude.m4
@@ -976,4 +976,21 @@ AC_DEFUN([SHERPA_SETUP_CONFIGURE_OPTIONS],
     AC_DEFINE([ENABLE_BINRELOC], "1", [binreloc activation])
   fi
 
+  AC_ARG_ENABLE(
+    tensorflow,
+    AC_HELP_STRING([--enable-tensorflow], [Enable tensorflow]),
+    [ AC_MSG_CHECKING(for tensorflow installation directory)
+      case "${enableval}" in
+        no)  AC_MSG_RESULT(tensorflow not enabled); tensorflow=false ;;
+        yes)  TF_CFLAGS="$(python -c 'import tensorflow as tf; print(" ".join(tf.sysconfig.get_compile_flags()))')";
+              TF_LFLAGS="$(python -c 'import tensorflow as tf; print(" ".join(tf.sysconfig.get_link_flags()))')";
+              AC_MSG_RESULT([${TF_CFLAGS}]); tensorflow=true;;
+      esac
+    ],
+    [ tensorflow=false ]
+  )
+  AC_SUBST(TF_CFLAGS)
+  AC_SUBST(TF_LFLAGS)
+  AM_CONDITIONAL(ENABLE_TENSORFLOW, test "$tensorflow" = "true")
+
 ])
