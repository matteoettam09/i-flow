diff --git a/AddOns/Python/MEProcess.C b/AddOns/Python/MEProcess.C
index 4761a9a..34cc087 100644
--- a/AddOns/Python/MEProcess.C
+++ b/AddOns/Python/MEProcess.C
@@ -157,7 +157,7 @@ void MEProcess::AddInFlav(const int &id)
   ATOOLS::Flavour flav(id>0?id:-id, id>0 ? true : false);
   p_amp->CreateLeg(ATOOLS::Vec4D(), flav);
   p_amp->SetNIn(p_amp->NIn()+1);
-  PHASIC::Process_Base::SortFlavours(p_amp);
+  //  PHASIC::Process_Base::SortFlavours(p_amp);
   m_inpdgs.push_back(id);
   m_flavs.push_back(flav);
   m_nin+=1;
@@ -168,7 +168,7 @@ void MEProcess::AddOutFlav(const int &id)
   DEBUG_FUNC(id);
   ATOOLS::Flavour flav(id>0?id:-id, id>0 ? false : true);
   p_amp->CreateLeg(ATOOLS::Vec4D(), flav);
-  PHASIC::Process_Base::SortFlavours(p_amp);
+  //PHASIC::Process_Base::SortFlavours(p_amp);
   m_outpdgs.push_back(id);
   m_flavs.push_back(flav);
   m_nout+=1;
@@ -181,7 +181,7 @@ void MEProcess::AddInFlav(const int &id, const int &col1, const int &col2)
   p_amp->CreateLeg(ATOOLS::Vec4D(), flav,
                    ATOOLS::ColorID(col1, col2));
   p_amp->SetNIn(p_amp->NIn()+1);
-  PHASIC::Process_Base::SortFlavours(p_amp);
+  //PHASIC::Process_Base::SortFlavours(p_amp);
   m_inpdgs.push_back(id);
   m_flavs.push_back(flav);
   m_nin+=1;
@@ -193,7 +193,7 @@ void MEProcess::AddOutFlav(const int &id, const int &col1, const int &col2)
   ATOOLS::Flavour flav(id>0?id:-id, id>0 ? false : true);
   p_amp->CreateLeg(ATOOLS::Vec4D(), flav,
                    ATOOLS::ColorID(col1, col2));
-  PHASIC::Process_Base::SortFlavours(p_amp);
+  //PHASIC::Process_Base::SortFlavours(p_amp);
   m_outpdgs.push_back(id);
   m_flavs.push_back(flav);
   m_nout+=1;
@@ -347,6 +347,7 @@ double MEProcess::MatrixElement()
 
 double MEProcess::CSMatrixElement()
 {
+//    ATOOLS::msg -> SetLevel(15);
   if (p_colint==NULL) return MatrixElement();
   GenerateColorPoint();
   double r_csme(0.);
@@ -375,6 +376,20 @@ double MEProcess::CSMatrixElement()
   }
   return r_csme;
 }
+  
+std::vector<double> MEProcess::CSMatrixElementVec(int nParts, int nEvents, int index, double* arr) {
+//    ATOOLS::msg -> SetLevel(15);
+    std::vector<double> result(nEvents);
+    for(int i = 0; i < nEvents; ++i) {
+        for(int j = 0; j < nParts; ++j) {
+            int n = j*nEvents*4+4*i;
+            SetMomentum(j,arr[n],arr[n+1],arr[n+2],arr[n+3]);
+        }
+        result[i] = CSMatrixElement();
+    }
+
+    return result;
+}
 
 double MEProcess::GetFlux()
 {
diff --git a/AddOns/Python/MEProcess.H b/AddOns/Python/MEProcess.H
index 64dcfe9..0d71de7 100644
--- a/AddOns/Python/MEProcess.H
+++ b/AddOns/Python/MEProcess.H
@@ -74,6 +74,7 @@ public:
   ATOOLS::Vec4D_Vector TestPoint(const double& sqrts);
   double MatrixElement();
   double CSMatrixElement();
+  std::vector<double> CSMatrixElementVec(int nEvents, int nParts, int index, double* arr);
 
   double GetFlux();
   std::string GeneratorName();
diff --git a/AddOns/Python/MEProcess.i b/AddOns/Python/MEProcess.i
index 0403739..a69a31e 100644
--- a/AddOns/Python/MEProcess.i
+++ b/AddOns/Python/MEProcess.i
@@ -6,6 +6,8 @@
 #include "AddOns/Python/MEProcess.H"
 %}
 
+%include "std_vector.i"
+
 %catches (ATOOLS::Exception) MEProcess::Initialize();
 
 namespace SHERPA{
@@ -19,6 +21,16 @@ namespace PHASIC{
   class Process_Base;
 }
 
+%template(vectord) std::vector<double>;
+
+%include "numpy.i"
+
+%init %{
+import_array();
+%}
+
+%apply (int DIM1, int DIM2, int DIM3, double* IN_ARRAY3) {(int nEvents, int nParts, int index, double* arr)};
+
 class MEProcess{
 
 public:
@@ -38,6 +50,7 @@ public:
   ATOOLS::Vec4D_Vector TestPoint(const double& sqrts);
   double MatrixElement();
   double CSMatrixElement();
+  std::vector<double> CSMatrixElementVec(int nEvents, int nParts, int index, double* arr);
   double MEProcess::GetFlux();
   inline ATOOLS::Cluster_Amplitude* GetAmp()
   {return m_amp;}
diff --git a/AddOns/Python/Makefile.am b/AddOns/Python/Makefile.am
index f99e87b..48126d1 100644
--- a/AddOns/Python/Makefile.am
+++ b/AddOns/Python/Makefile.am
@@ -18,7 +18,7 @@ python_LTLIBRARIES = _Sherpa.la
 
 nodist__Sherpa_la_SOURCES = Sherpa_wrap.cxx
 _Sherpa_la_CPPFLAGS= @PYTHON_CPPFLAGS@
-_Sherpa_la_LDFLAGS = -module
+_Sherpa_la_LDFLAGS = -module -shared -flat_namespace -undefined suppress
 _Sherpa_la_LIBADD  = -L@SHERPABUILDDIR@/Main -lSherpaMain -lMEProcess\
 		$(HZTOOLLIBS) $(PGSLIBS) @ATOOLSLIBS@
 
diff --git a/AddOns/Python/Sherpa.i b/AddOns/Python/Sherpa.i
index 2009ceb..b9eef282 100644
--- a/AddOns/Python/Sherpa.i
+++ b/AddOns/Python/Sherpa.i
@@ -1,4 +1,11 @@
 %module Sherpa
+
+%{
+#define SWIG_FILE_WITH_INIT
+#include <SHERPA/Main/Sherpa.H>
+#include "ATOOLS/Math/Random.H"
+  %}
+
 %include "Exception.i"
 %include "Flavour.i"
 %include "Vec4.i"
@@ -8,11 +15,6 @@
 %include "MEProcess.i"
 %include "Random.i"
 
-%{
-#include <SHERPA/Main/Sherpa.H>
-#include "ATOOLS/Math/Random.H"
-  %}
-
 %catches (ATOOLS::Exception) SHERPA::Sherpa::InitializeTheRun(int, char**);
 
 // A typemap is required in order to be able to pass
diff --git a/PHASIC++/Scales/Fastjet_KFactor_Setter.C b/PHASIC++/Scales/Fastjet_KFactor_Setter.C
index e69de29..477238b 100644
--- a/PHASIC++/Scales/Fastjet_KFactor_Setter.C
+++ b/PHASIC++/Scales/Fastjet_KFactor_Setter.C
@@ -0,0 +1,252 @@
+#include "PHASIC++/Scales/KFactor_Setter_Base.H"
+
+#include "ATOOLS/Math/Algebra_Interpreter.H"
+#include "PHASIC++/Process/Process_Base.H"
+#include "PHASIC++/Main/Process_Integrator.H"
+#include "PHASIC++/Main/Phase_Space_Handler.H"
+#include "ATOOLS/Org/MyStrStream.H"
+#include "MODEL/Main/Running_AlphaS.H"
+#include "MODEL/Main/Running_AlphaQED.H"
+#include "ATOOLS/Org/Run_Parameter.H"
+#include "ATOOLS/Phys/Fastjet_Helpers.H"
+#include "fastjet/PseudoJet.hh"
+#include "fastjet/ClusterSequence.hh"
+#include "fastjet/SISConePlugin.hh"
+#include "fastjet/EECambridgePlugin.hh"
+#include "fastjet/JadePlugin.hh"
+
+namespace PHASIC {
+
+  class Fastjet_KFactor_Setter: 
+    public KFactor_Setter_Base,
+    public ATOOLS::Tag_Replacer {
+  private:
+
+    ATOOLS::Algebra_Interpreter *p_calc;
+
+    std::string m_kftag;
+
+    fastjet::JetDefinition *p_jdef;
+    fastjet::SISConePlugin *p_siscplug;
+    fastjet::EECambridgePlugin *p_eecamplug;
+    fastjet::JadePlugin *p_jadeplug;
+
+    double m_ptmin, m_etmin, m_eta, m_y;
+    std::vector<double> m_mu2;
+
+    void SetKFactor(const std::string &kftag);
+
+  public:
+
+    Fastjet_KFactor_Setter(const KFactor_Setter_Arguments &args);
+
+    ~Fastjet_KFactor_Setter();
+
+    double KFactor();
+
+    std::string   ReplaceTags(std::string &expr) const;    
+    ATOOLS::Term *ReplaceTags(ATOOLS::Term *term) const;    
+    
+    void AssignId(ATOOLS::Term *term);
+
+  };// end of class KFactor_Setter_Base
+
+}// end of namespace PHASIC
+
+using namespace PHASIC;
+using namespace ATOOLS;
+
+DECLARE_GETTER(Fastjet_KFactor_Setter,"FASTJET",
+	       KFactor_Setter_Base,KFactor_Setter_Arguments);
+
+KFactor_Setter_Base *ATOOLS::Getter
+<KFactor_Setter_Base,KFactor_Setter_Arguments,Fastjet_KFactor_Setter>::
+operator()(const KFactor_Setter_Arguments &args) const
+{
+  return new Fastjet_KFactor_Setter(args);
+}
+
+void ATOOLS::Getter<KFactor_Setter_Base,KFactor_Setter_Arguments,
+		    Fastjet_KFactor_Setter>::
+PrintInfo(std::ostream &str,const size_t width) const
+{ 
+  str<<"Fastjet kfactor scheme\n";
+}
+
+Fastjet_KFactor_Setter::Fastjet_KFactor_Setter
+(const KFactor_Setter_Arguments &args):
+  KFactor_Setter_Base(args), p_jdef(NULL),
+  p_siscplug(NULL), p_eecamplug(NULL), p_jadeplug(NULL)
+{
+  bool ee(rpa->gen.Beam1().IsLepton() && rpa->gen.Beam2().IsLepton());
+  std::string jtag(args.m_kfac);
+  size_t pos(jtag.find("FASTJET["));
+  if (pos==std::string::npos)
+    THROW(fatal_error,"Invalid kfactor '"+args.m_kfac+"'");
+  jtag=jtag.substr(pos+8);
+  pos=jtag.find(']');
+  if (pos==std::string::npos)
+    THROW(fatal_error,"Invalid kfactor '"+args.m_kfac+"'");
+  jtag=jtag.substr(0,pos);
+  Data_Reader read(" ",",","#","=");
+  read.AddIgnore(":");
+  read.SetAddCommandLine(false);
+  read.SetString(jtag);
+  m_ptmin=read.StringValue<double>("PT",0.0);
+  m_etmin=read.StringValue<double>("ET",0.0);
+  m_eta=read.StringValue<double>("Eta",100.0);
+  m_y=read.StringValue<double>("Y",100.0);
+  double R(read.StringValue<double>("R",0.4));
+  double f(read.StringValue<double>("f",0.75));
+  std::string algo(read.StringValue<std::string>("A","kt"));
+  fastjet::JetAlgorithm ja(fastjet::kt_algorithm);
+  if (algo=="cambridge") ja=fastjet::cambridge_algorithm;
+  if (algo=="antikt") ja=fastjet::antikt_algorithm;
+  if (algo=="siscone") p_siscplug=new fastjet::SISConePlugin(R,f);
+  std::string reco(read.StringValue<std::string>("C","E"));
+  fastjet::RecombinationScheme recom(fastjet::E_scheme);
+  if (reco=="pt") recom=fastjet::pt_scheme;
+  if (reco=="pt2") recom=fastjet::pt2_scheme;
+  if (reco=="Et") recom=fastjet::Et_scheme;
+  if (reco=="Et2") recom=fastjet::Et2_scheme;
+  if (reco=="BIpt") recom=fastjet::BIpt_scheme;
+  if (reco=="BIpt2") recom=fastjet::BIpt2_scheme;
+  if (p_siscplug) p_jdef=new fastjet::JetDefinition(p_siscplug);
+  else if (p_eecamplug) p_jdef=new fastjet::JetDefinition(p_eecamplug);
+  else if (p_jadeplug) p_jdef=new fastjet::JetDefinition(p_jadeplug);
+  else if (ee) p_jdef=new fastjet::JetDefinition(fastjet::ee_kt_algorithm);
+  else p_jdef=new fastjet::JetDefinition(ja,R,recom);
+  // m_f=p_proc->Flavours();
+  // m_p.resize(p_proc->NIn()+p_proc->NOut());
+  pos=args.m_kfac.find('{');
+  if (pos==std::string::npos)
+    THROW(fatal_error,"Invalid kfactor '"+args.m_kfac+"'");
+  m_kftag=args.m_kfac.substr(pos+1);
+  pos=m_kftag.rfind('}');
+  if (pos==std::string::npos)
+    THROW(fatal_error,"Invalid kfactor '"+args.m_kfac+"'");
+  m_kftag=m_kftag.substr(0,pos);
+  p_calc = new Algebra_Interpreter();
+  p_calc->AddFunction(MODEL::as->GetAIFunction());
+  p_calc->AddFunction(MODEL::aqed->GetAIFunction());
+  SetKFactor(m_kftag);
+  if (msg_LevelIsDebugging()) p_calc->PrintEquation();
+}
+
+Fastjet_KFactor_Setter::~Fastjet_KFactor_Setter()
+{
+  if (p_siscplug) delete p_siscplug;
+  if (p_eecamplug) delete p_eecamplug;
+  if (p_jadeplug) delete p_jadeplug;
+  delete p_jdef;
+  delete p_calc;
+}
+
+double Fastjet_KFactor_Setter::KFactor() 
+{
+  DEBUG_FUNC(m_on);
+  if (!m_on) return 1.0;
+  std::vector<fastjet::PseudoJet> input;
+  for (size_t i(p_proc->NIn());i<p_proc->NIn()+p_proc->NOut();++i)
+    if (ToBeClustered(p_proc->Flavours()[i],0))
+      input.push_back(MakePseudoJet(p_proc->Flavours()[i],
+				    p_proc->Integrator()->Momenta()[i]));
+  fastjet::ClusterSequence cs(input,*p_jdef);
+  m_mu2.resize(0);
+  for (size_t i(0);i<input.size();++i)
+    {
+        DEBUG_VAR(cs.exclusive_dmerge_max(i));
+    m_mu2.push_back(cs.exclusive_dmerge_max(i));
+    }
+  m_weight=p_calc->Calculate()->Get<double>();
+  DEBUG_VAR(m_weight);
+  return m_weight;
+}
+
+std::string Fastjet_KFactor_Setter::ReplaceTags(std::string &expr) const
+{
+  return p_calc->ReplaceTags(expr);
+}
+
+Term *Fastjet_KFactor_Setter::ReplaceTags(Term *term) const
+{
+  switch (term->Id()) {
+  case 0:
+    term->Set(M_PI);
+    return term;
+  case 1:
+    term->Set(p_proc->ScaleSetter()->Scale(stp::ren));
+    return term;
+  case 2:
+    term->Set(p_proc->ScaleSetter()->Scale(stp::fac));
+    return term;
+  case 3:
+    term->Set(rpa->gen.Ecms());
+    return term;
+  case 4:
+    term->Set(sqr(rpa->gen.Ecms()));
+    return term;
+  case 11:
+    term->Set((double)p_proc->MaxOrder(0));
+    return term;
+  case 12:
+    term->Set((double)p_proc->MaxOrder(1));
+    return term;
+  default:
+    if (term->Id()>=1000) {
+      term->Set(p_proc->Integrator()->Momenta()[term->Id()-1000]);
+      return term;
+    }
+    if (m_mu2.size()>term->Id()-100) term->Set(m_mu2[term->Id()-100]);
+    else {
+      msg_Error()<<METHOD<<"(): Invalid Tag '"<<term->Tag()<<"'"<<std::endl;
+    }
+    return term;
+  }
+  return term;
+}
+
+void Fastjet_KFactor_Setter::AssignId(Term *term)
+{
+  if (term->Tag()=="M_PI") term->SetId(0);
+  else if (term->Tag()=="MU_R2") term->SetId(1);
+  else if (term->Tag()=="MU_F2") term->SetId(2);
+  else if (term->Tag()=="E_CMS") term->SetId(3);
+  else if (term->Tag()=="S_TOT") term->SetId(4);
+  else if (term->Tag()=="Order_QCD") term->SetId(11);
+  else if (term->Tag()=="Order_EW") term->SetId(12);
+  else if (term->Tag().find("p[")==0) {
+    term->SetId(1000+ToType<int>
+		(term->Tag().substr
+		 (2,term->Tag().length()-3)));
+  }
+  else {
+    term->SetId(100+ToType<int>
+		(term->Tag().substr
+		 (3,term->Tag().length()-4)));
+  }
+}
+
+void Fastjet_KFactor_Setter::SetKFactor(const std::string &kftag)
+{ 
+  if (kftag=="" || kftag=="0") THROW(fatal_error,"No scale specified");
+  msg_Debugging()<<METHOD<<"(): coupling '"<<kftag<<"' {\n";
+  msg_Indent();
+  p_calc->SetTagReplacer(this);
+  p_calc->AddTag("M_PI",ToString(M_PI));
+  p_calc->AddTag("MU_F2","1.0");
+  p_calc->AddTag("MU_R2","1.0");
+  p_calc->AddTag("E_CMS","1.0");
+  p_calc->AddTag("S_TOT","1.0");
+  p_calc->AddTag("Order_QCD","0.0");
+  p_calc->AddTag("Order_EW","0.0");
+  if (p_proc->ScaleSetter()==NULL) THROW
+    (fatal_error,"Process "+p_proc->Name()+" has no scale setter");
+  for (size_t i(0);i<p_proc->NOut();++i)
+    p_calc->AddTag("MU_"+ToString(i)+"2","1.0");
+  for (size_t i(0);i<p_proc->NIn()+p_proc->NOut();++i)
+    p_calc->AddTag("p["+ToString(i)+"]",ToString(Vec4D()));
+  std::string res=p_calc->Interprete(kftag);
+  msg_Debugging()<<"} -> "<<res<<"\n";
+}
+
diff --git a/PHASIC++/Scales/Makefile.am b/PHASIC++/Scales/Makefile.am
index 0d6054b..d42ddd9 100644
--- a/PHASIC++/Scales/Makefile.am
+++ b/PHASIC++/Scales/Makefile.am
@@ -25,6 +25,7 @@ libPhasicScales_la_SOURCES    =	\
 				HTPrime_Core_Scale.C \
 				METS_Scale_Setter.C \
 				Variable_KFactor_Setter.C \
+				Fastjet_KFactor_Setter.C \
 				No_KFactor_Setter.C
 
 localinc_HEADERS      =	\
diff --git a/PHASIC++/Scales/Variable_KFactor_Setter.C b/PHASIC++/Scales/Variable_KFactor_Setter.C
index 8f433ee..f1d58a7 100644
--- a/PHASIC++/Scales/Variable_KFactor_Setter.C
+++ b/PHASIC++/Scales/Variable_KFactor_Setter.C
@@ -8,6 +8,10 @@
 #include "MODEL/Main/Running_AlphaS.H"
 #include "MODEL/Main/Running_AlphaQED.H"
 #include "ATOOLS/Org/Run_Parameter.H"
+#include "ATOOLS/Phys/Fastjet_Helpers.H"
+#include "fastjet/PseudoJet.hh"
+#include "fastjet/ClusterSequence.hh"
+#include "fastjet/SISConePlugin.hh"
 
 namespace PHASIC {
 
diff --git a/SHERPA/PerturbativePhysics/Matrix_Element_Handler.C b/SHERPA/PerturbativePhysics/Matrix_Element_Handler.C
index 8eeac75..075b142 100644
--- a/SHERPA/PerturbativePhysics/Matrix_Element_Handler.C
+++ b/SHERPA/PerturbativePhysics/Matrix_Element_Handler.C
@@ -135,6 +135,7 @@ void Matrix_Element_Handler::InitNLOMC()
 bool Matrix_Element_Handler::CalculateTotalXSecs() 
 {
   int storeresults = Data_Reader(" ",";","!","=").GetValue("GENERATE_RESULT_DIRECTORY", 1);
+  if (storeresults<0) return true;
   if (storeresults) {
     My_In_File::OpenDB(m_respath+"/");
     My_In_File::ExecDB(m_respath+"/","PRAGMA cache_size = 100000");
